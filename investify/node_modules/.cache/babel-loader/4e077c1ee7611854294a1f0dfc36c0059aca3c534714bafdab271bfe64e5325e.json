{"ast":null,"code":"var _jsxFileName = \"/Users/yashtanwar/Documents/GitHub/money-mavericks/investify/src/App.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\nimport './App.css';\n// import SideMenu from './components/SideMenu';\n// import Navbar from './components/Navbar';\n// import Overview from './Overview';\n// import ChatGPT from './ChatBot';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route\n// } from \"react-router-dom\";\nimport React, { useState } from 'react';\nimport ChatMessage from './components/ChatMessage';\nimport ChatInput from './components/ChatInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const handleSendMessage = text => {\n    const newMessage = {\n      text,\n      isBot: false\n    };\n    setMessages([...messages, newMessage]);\n\n    // Here you can call the API to get a response from the ChatGPT model\n    // and add it to the messages state as a bot message\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My Chatbot App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n        text: message.text,\n        isBot: message.isBot\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n      onSendMessage: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dxxfFX7fiXmC0h9Fk+B7I5VonqM=\");\n_c = App;\nexport default App;\n{/* <>\n <Navbar/>\n <SideMenu />\n <Router>\n  <Routes>\n    <Route path=\"/ChatBot\" element={<Overview />} />\n    <Route path=\"/\" element={<ChatGPT/>} />\n  </Routes>\n </Router>\n </> */}\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ChatMessage","ChatInput","jsxDEV","_jsxDEV","App","_s","messages","setMessages","handleSendMessage","text","newMessage","isBot","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","onSendMessage","_c","$RefreshReg$"],"sources":["/Users/yashtanwar/Documents/GitHub/money-mavericks/investify/src/App.js"],"sourcesContent":["// import React from 'react';\nimport './App.css'\n// import SideMenu from './components/SideMenu';\n// import Navbar from './components/Navbar';\n// import Overview from './Overview';\n// import ChatGPT from './ChatBot';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route\n// } from \"react-router-dom\";\nimport React, { useState } from 'react';\nimport ChatMessage from './components/ChatMessage';\nimport ChatInput from './components/ChatInput';\n\n\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n\n  const handleSendMessage = (text) => {\n    const newMessage = { text, isBot: false };\n    setMessages([...messages, newMessage]);\n\n    // Here you can call the API to get a response from the ChatGPT model\n    // and add it to the messages state as a bot message\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>My Chatbot App</h1>\n      <div className=\"chat-container\">\n        {messages.map((message, index) => (\n          <ChatMessage key={index} text={message.text} isBot={message.isBot} />\n        ))}\n      </div>\n      <ChatInput onSendMessage={handleSendMessage} />\n    </div>\n   \n  );\n}\n\nexport default App;\n\n{/* <>\n<Navbar/>\n<SideMenu />\n<Router>\n  <Routes>\n    <Route path=\"/ChatBot\" element={<Overview />} />\n    <Route path=\"/\" element={<ChatGPT/>} />\n  </Routes>\n</Router>\n</> */}"],"mappings":";;AAAA;AACA,OAAO,WAAW;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,SAAS,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAI/C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMS,iBAAiB,GAAIC,IAAI,IAAK;IAClC,MAAMC,UAAU,GAAG;MAAED,IAAI;MAAEE,KAAK,EAAE;IAAM,CAAC;IACzCJ,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEI,UAAU,CAAC,CAAC;;IAEtC;IACA;EACF,CAAC;;EAED,oBACEP,OAAA;IAAKS,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBV,OAAA;MAAAU,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eACvBd,OAAA;MAAKS,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAC5BP,QAAQ,CAACY,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC3BjB,OAAA,CAACH,WAAW;QAAaS,IAAI,EAAEU,OAAO,CAACV,IAAK;QAACE,KAAK,EAAEQ,OAAO,CAACR;MAAM,GAAhDS,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACxB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACE,eACNd,OAAA,CAACF,SAAS;MAACoB,aAAa,EAAEb;IAAkB;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC3C;AAGV;AAACZ,EAAA,CAvBQD,GAAG;AAAAkB,EAAA,GAAHlB,GAAG;AAyBZ,eAAeA,GAAG;AAElB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OATC;AASM,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}